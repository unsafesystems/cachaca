// Code generated by mockery v2.23.2. DO NOT EDIT.

package mocks

import (
	context "context"

	auth "github.com/unsafesystems/cachaca/auth"

	gin "github.com/gin-gonic/gin"

	mock "github.com/stretchr/testify/mock"
)

// Authorizer is an autogenerated mock type for the Authorizer type
type Authorizer struct {
	mock.Mock
}

// AuthorizeGrpc provides a mock function with given fields: ctx, creds
func (_m *Authorizer) AuthorizeGrpc(ctx context.Context, creds *auth.Credentials) (context.Context, error) {
	ret := _m.Called(ctx, creds)

	var r0 context.Context
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *auth.Credentials) (context.Context, error)); ok {
		return rf(ctx, creds)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *auth.Credentials) context.Context); ok {
		r0 = rf(ctx, creds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *auth.Credentials) error); ok {
		r1 = rf(ctx, creds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthorizeHttp provides a mock function with given fields: ctx, creds
func (_m *Authorizer) AuthorizeHTTP(ctx *gin.Context, creds *auth.Credentials) error {
	ret := _m.Called(ctx, creds)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gin.Context, *auth.Credentials) error); ok {
		r0 = rf(ctx, creds)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewAuthorizer interface {
	mock.TestingT
	Cleanup(func())
}

// NewAuthorizer creates a new instance of Authorizer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAuthorizer(t mockConstructorTestingTNewAuthorizer) *Authorizer {
	mock := &Authorizer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
